On the last page, we discussed what <ref ClassicalLogic /> is. On this page, we
will begin to describe how it works. This is a common pattern you will see
throughout this treatise: first we tell the proof checker what the symbols are,
then we tell it what rules the symbols follow. After that, it can check any
proof thrown at it.

For a human who already has some intuition on logic, the truth tables on the
previous page are sufficient. However, this does not help a computer to
understand it, nor does it scale to more complicated systems. Rather, we will
define axioms, which are the rules for how a system works. In particular, it
describes the rules for what statements may be derived given a list of
assumptions.

<ref ClassicalLogic /> requires only four axioms. The first three are all of the
same general form:

\Axiom PropSimple: ClassicalLogic {
  name = "The Axiom of Simplification"
  tagline = {
    Before any statement which has already been derived, we may introduce any
    antecedent.
  }
  description = {
    As a simple example, let's say that we have somehow managed to derive that
    ``math is <unicorn>beautiful</unicorn>". Then we may immediately conclude
    that ``if cats rule the world, then math is <unicorn>beautiful</unicorn>".
    Of course, the antecedent introduced can be any statement, even a
    nonsensical one.
  }

  var phi: Prop
  var psi: Prop

  assertion = 'phi => ('psi => 'phi);
}

\Axiom PropDistrib: ClassicalLogic {
  name = "The Axiom of Distribution"
  tagline = {
    The <ref ClassicalLogic.implies /> operator distributes over itself.
  }
  description = {
    Because of the length of this axiom, it's hard to tell what it even means.
    It's easier if you break it down into its antecedent and consequent. The
    antecedent is
    
    \[
      'phi => ('psi => 'chi)
    \],

    and the consequent is

    \[
      ('phi => 'psi) => ('phi => 'chi)
    \].

    Thus, the intuitive way to understand this axiom is that the
    <ref ClassicalLogic.implies /> operator distributes over itself.
  }

  var phi: Prop
  var psi: Prop
  var chi: Prop

  assertion = ('phi => ('psi => 'chi)) => (('phi => 'psi) => ('phi => 'chi));
}

\Axiom PropContra: ClassicalLogic {
  name = "The Axiom of Contraposition"
  tagline = {
    The contrapositive of a statment implies the statement itself.
  }
  description = {
    The contrapositive, if that was unclear, is obtained from the statement
    \('phi => 'psi\) by negating both the antecedent and consequent, then
    swapping their order. In this case, the contrapositive would be
    \(!'psi => !'phi\).
  }

  var phi: Prop
  var psi: Prop

  assertion = (!'psi => !'phi) => ('phi => 'psi);
}

Now's a good time to describe how to use these axioms. The statement immediately
after the turnstile symbol is called the assertion of the axiom. Some axioms and
theorems will also have a premise in addition to the assertion. Some extra work
will have to be done before such axioms and theorems can be used. However,
because <ref ClassicalLogic.PropSimple />, <ref ClassicalLogic.PropDistrib />
and <ref ClassicalLogic.PropContra /> each have no premise, we can use them
anywhere in a proof.

Technically, these axioms are actually axiom <em>schemas</em>, each of which
stand for infinitely many axioms. The variables in these axiom schemas, which
may be recognized by the apostrophe before them, are actually placeholders for
any expression of the proper type. For example, \(p => (p => p)\) is an axiom
(provided \(p\) is a proposition) because it can be derived from <ref
ClassicalLogic.PropSimple /> by making the following substitutions:

<sublist>
  'phi >>> p;
  'psi >>> p;
</sublist>

Obviously, most statements which may be derived are not of any of these forms,
so we need more axioms if we want to cover everything. Fortuitously, we only
need one more axiom:

\Axiom ModusPonens: ClassicalLogic {
  name = "Modus Ponens"
  tagline = {
    The derivation rule for <ref ClassicalLogic.implies />.
  }
  description = {
    In the description of <ref ClassicalLogic.implies />, it's mentioned that
    ``as soon as you derive the antecedent \('phi\), you can immediately derive
    the consequent \('psi\)". This is the axiom which allows us to do that.
  }

  var phi: Prop
  var psi: Prop

  premise = [
    'phi => 'psi;
    'phi;
  ]
  assertion = 'psi;
}

This axiom is different from the other three because this axiom has a premise.
Before we may derive the assertion, we must first derive every item in the
premise. That is, when we write a proof and we wish to derive \('psi\) using
<ref ClassicalLogic.ModusPonens />, we must first derive both \('phi => 'psi\)
and \('phi\). Only then may we derive \('psi\).

To prove any theorem, we simply have to find axioms from which we can use
<ref ClassicalLogic.ModusPonens /> to derive the theorem. As an example to see
this in action, let's derive the simple theorem that any proposition implies
itself.

\Theorem PropIdentity: ClassicalLogic {
  name = "Propositional Identity"
  tagline = {
    Propositions imply themselves.
  }

  flags = [
    reflexive,
  ]

  var phi: Prop

  assertion = 'phi => 'phi;
}

If this were listed as an axiom and not a theorem, then we could just use it in
exactly the same way as any other axiom. However, that would be both redundant
and dangerous.

It would be redundant because <ref ClassicalLogic.PropIdentity /> can already be
derived from the axioms, you don't need another axiom just for this. Worse, it
would be dangerous because, in a system with many axioms, it's prone to human
error. It's very easy to mistakingly create an inconsistent system where some
statements are both true and false at the same time. As we will see when we
discuss <ref ClassicalLogic.PropExplosion />, this would be disastrous.

By marking this as a theorem we are declaring that this theorem is not an
axiom, but rather a fact which may be derived from the axioms. Such a derivation
is called a ``proof", and once we write the proof we may use the theorem in
exactly the same way as we do the axioms.

\Proof PropIdentity: ClassicalLogic {
  We begin by deriving an axiom in the form of
  <ref ClassicalLogic.PropSimple />.

  |PropSimple, #1| 'phi => (('phi => 'phi) => 'phi);.

  Specifically, this axiom is found by making the following substitutions:

  <sublist>
    'phi >>> 'phi;
    'psi >>> ('phi => 'phi);
  </sublist>

  Sometimes, a statement will be too long to easily recognize the substitutions.
  In general for these situations, there will be some text around it to explain
  where it came from. However, if there is still any confusion, there is a link
  at the beginning of every proof to a page which contains detailed information
  on every step of the proof. (NOTE: This feature has not been implemented yet)

  The next step of this proof comes from <ref ClassicalLogic.PropDistrib />
  by making the following substitutions:

  <sublist>
    'phi >>> 'phi;
    'psi >>> ('phi => 'phi);
    'chi >>> 'phi;
  </sublist>

  |PropDistrib, #2| ('phi => (('phi => 'phi) => 'phi))
    => (('phi => ('phi => 'phi)) => ('phi => 'phi));.

  As you can probably tell by now, if all proofs were like this, they would be
  too tedious to use for any practical purpose. Fear not: on the next page, we
  will start to build up quality-of-life improvements so that future proofs
  won't make the reader want to blow their brains out.

  Anyway, take a close look at steps <ref #1 /> and <ref #2 />. The keen-eyed
  among you will have noticed that the antecedent of <ref #2 /> is equal to
  <ref #1 />. This means we can use <ref ClassicalLogic.ModusPonens /> to derive

  |ModusPonens, #3| ('phi => ('phi => 'phi)) => ('phi => 'phi);.

  This is progress because if we can derive \('phi => ('phi => 'phi)\), i.e. the
  antecedent of <ref #3 />, then we can use another round of
  <ref ClassicalLogic.ModusPonens /> to derive the consequent of <ref #3 />,
  which happens to be the thing we want to show.

  Felicitiously, this antecedent happens to be an axiom:

  |PropSimple| 'phi => ('phi => 'phi);.

  Finally, we can derive

  |ModusPonens| 'phi => 'phi;,

  which is what we wanted to show.
}

All that work, and for something so trivial! Believe me, it will get worse
before it gets better. Obviously, we will need a better way to do these proofs,
or else the proof checker will be practically unusable. On the next few pages,
we will prove a few more theorems to bootstrap a technique which will make our
lives much easier.
