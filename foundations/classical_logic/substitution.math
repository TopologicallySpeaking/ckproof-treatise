Here we will explore the first substantial concept in this treatise:
substitution. A substitution is an argument of this form: let's say that we have
derived the equations

\[ 'y = 15 * 'x - 17 \]

and

\[ 'x = sin('t) \].

We should be able to derive from these equations that

\[ 'y = 15 * sin('t) - 17 \].

Unfortunately, the only proper way to do this is to first derive

\[ 15 * 'x = 15 * sin('t) \]
\[ 15 * 'x - 17 = 15 * sin('t) - 17 \],

and by transitivity of equality we get

\[ 'y = 15 * sin('t) - 17 \].

TODO: Implement better formatting for this text.

TODO: MathJax fails to render these properly on Firefox.

This would be a lot of menial work for something which should be just one step
of the proof, and it would only get worse as equations become longer. Because of
this, ckproof is able to perform these substitutions automatically. First,
though, there is a bit of nuance which we should discuss.

# Functions

In elementary math classes, we learn that if we ``do the same thing to both
sides of an equation", then the resulting equation is still valid.
Unfortunately, when we study mathematics at the level of rigor used in this
treatise, it's not that simple. Indeed, not all symbols can be applied in this
way. A classic example is the square root. Given the equation

\[ \pow{'y, 2} = 4 \],

you may na√Øvely expect that you can take the square root of both sides to get

\[ \sqrt{\pow{'y, 2}} = \sqrt{4} \]
\[ 'y = 2 \].

TODO: Implement multiline display math with alignment.

Unfortunately, this is not a valid deduction. You cannot guarantee from just the
first equation that \('y = 2\).

TODO: References to display math.

In particular, it could also be that \('y = -2\). This often comes as a surprise
to students, who up until that point had been blindly doing the same thing to
both sides of an equation and gotten the right answer.

A symbol for which this process does work is called a function. More precisely,
let \(~\) be a symbol with two inputs, and let \(f\) be a symbol with \(n\)
inputs. Let's say we manage to derive \('x ~ 'y\), \('x ~ 'y\), \(...\), 
\('x ~ 'y\). We say that \(f\) is a function if we are able to also derive
\(f('x\,...\,'x) ~ f('y\,...\,'y)\).

TODO: Add subscripts to the x's and y's.

First, we will prove that various symbols we have derived so far are functions.

## Negation and Implication

<ref ClassicalLogic.negation /> is the simplest example of all the symbols we
have defined so far, mainly because it only has one input. Specifically, it is a
function over <ref ClassicalLogic.equiv />.

\Theorem NegationFunctionEquiv: ClassicalLogic {
  name = "Negation is a Function over Material Equivalence"
  tagline = {
    If \('phi <-> 'psi\), then \(!'phi <-> !'psi\).
  }

  flags = [
    function,
  ]

  var phi: Prop
  var psi: Prop

  premise = [
    'phi <-> 'psi;
  ]
  assertion = !'phi <-> !'psi;
}

\Proof NegationFunctionEquiv: ClassicalLogic {
  This can be derived directly from the hypothesis.

  |1| 'phi <-> 'psi;

  In the forward direction,

  |EquivForwardInf| 'phi -> 'psi;
  |PropContraConvInf| !'psi -> !'phi;.

  Similarly, in the backward direction,

  |EquivBackwardInf| 'psi -> 'phi;
  |PropContraConvInf| !'phi -> !'psi;.

  Altogether, this gives us

  |EquivIntroInf| !'phi <-> !'psi;,

  which is what we were trying to prove.
}

This does not, however, work for <ref ClassicalLogic.implies />, which you can
see if you work out the truth tables for \('phi -> 'psi\) and
\(!'phi -> !'psi\).

The proofs for two-input functions are not significantly more complicated, but
they do tend to be quite a bit longer. As a surprising yet commonly used
example, we shall prove that <ref ClassicalLogic.implies /> is a function over
<ref ClassicalLogic.equiv />.

\Theorem ImpliesFunctionEquiv: ClassicalLogic {
  name = "Material Implication is a Function over Material Equivalence"
  tagline = {
    If \('phi <-> 'psi\) and \('chi <-> 'theta\), then
    \(('phi -> 'chi) <-> ('psi -> 'theta)\).
  }

  flags = [
    function,
  ]

  var phi: Prop
  var psi: Prop
  var chi: Prop
  var theta: Prop

  premise = [
    'phi <-> 'psi;
    'chi <-> 'theta;
  ]
  assertion = ('phi -> 'chi) <-> ('psi -> 'theta);
}

\Proof ImpliesFunctionEquiv: ClassicalLogic {
  Starting from the hypotheses,

  |1, #h1| 'phi <-> 'psi;
  |2, #h2| 'chi <-> 'theta;,

  we distribute \('phi\) into the forward implication of <ref #h2 />.

  |EquivForwardInf| 'chi -> 'theta;
  |PropSimpleInf| 'phi -> ('chi -> 'theta);
  |PropDistribInf| ('phi -> 'chi) -> ('phi -> 'theta);

  This is almost the forward implication of what we are trying to show, but the
  \('phi\) in the consequent should be replaced with \('psi\). To do this, we
  start by bringing that \('phi\) out to the front.

  |PropCommutation| 'phi -> (('phi -> 'chi) -> 'theta);

  From here, we may use the backward implication of <ref #h1 /> to derive

  |EquivBackwardInf| 'psi -> 'phi;
  |Syllogism| 'psi -> (('phi -> 'chi) -> 'theta);.

  We can bring that \('psi\) back in to get the forward implication of what we
  are looking for.

  |PropCommutation| ('phi -> 'chi) -> ('psi -> 'theta);

  The backward implication is similar. We begin by working the backward
  implication of <ref #h2 />.

  |EquivBackwardInf| 'theta -> 'chi;
  |PropSimpleInf| 'psi -> ('theta -> 'chi);
  |PropDistribInf| ('psi -> 'theta) -> ('psi -> 'chi);

  The \('psi\) in the consequent should be a \('phi\), and we can do this by
  using the forward implication of <ref #h1 />.

  |PropCommutation| 'psi -> (('psi -> 'theta) -> 'chi);
  |EquivForwardInf| 'phi -> 'psi;
  |Syllogism| 'phi -> (('psi -> 'theta) -> 'chi);
  |PropCommutation| ('psi -> 'theta) -> ('phi -> 'chi);

  Altogether, we have

  |EquivIntroInf| ('phi -> 'chi) <-> ('psi -> 'theta);.
}

## Conjunction and Disjunction

<ref ClassicalLogic.and /> and <ref ClassicalLogic.or /> are both functions over
<ref ClassicalLogic.implies />.

\Theorem AndFunctionImplies: ClassicalLogic {
  name = "Logical Conjunction is a Function over Material Implication"
  tagline = {
    If \('phi -> 'psi\) and \('chi -> 'theta\), then
    \(('phi & 'chi) -> ('psi & 'theta)\).
  }

  flags = [
    function,
  ]

  var phi: Prop
  var psi: Prop
  var chi: Prop
  var theta: Prop

  premise = [
    'phi -> 'psi;
    'chi -> 'theta;
  ]
  assertion = ('phi & 'chi) -> ('psi & 'theta);
}

\Proof AndFunctionImplies: ClassicalLogic {
  Unfortunately, this is one of those proofs which is correct, and it's easy to
  see that each step a is valid argument, but it does not have any intuitive
  interpretation.

  We begin by distributing \('psi\) into the contrapositive of the second
  hypothesis.

  |2| 'chi -> 'theta;
  |PropContraConvInf| !'theta -> !'chi;
  |PropSimpleInf| 'psi -> (!'theta -> !'chi);
  |PropDistribInf| ('psi -> !'theta) -> ('psi -> !'chi);

  Next, we change the \('psi\) in the consequent into a \('phi\), which we can
  do by using the first hypothesis.

  |PropCommutation| 'psi -> (('psi -> !'theta) -> !'chi);
  |1| 'phi -> 'psi;
  |Syllogism| 'phi -> (('psi -> !'theta) -> !'chi);
  |PropCommutation| ('psi -> !'theta) -> ('phi -> !'chi);

  The contrapositive of this statement,

  |PropContraConvInf| !('phi -> !'chi) -> !('psi -> !'theta);,

  is the definition of what we were trying to show.

  |!def| ('phi & 'chi) -> ('psi & 'theta);
}

\Theorem OrFunctionImplies: ClassicalLogic {
  name = "Logical Disjunction is a Function over Material Implication"
  tagline = {
    If \('phi -> 'psi\) and \('chi -> 'theta\), then
    \(('phi | 'chi) -> ('psi | 'theta)\).
  }

  flags = [
    function,
  ]

  var phi: Prop
  var psi: Prop
  var chi: Prop
  var theta: Prop

  premise = [
    'phi -> 'psi;
    'chi -> 'theta;
  ]
  assertion = ('phi | 'chi) -> ('psi | 'theta);
}

\Proof OrFunctionImplies: ClassicalLogic {
  This proof is similar to the last. Begin by distributing \(!'phi\) into the
  second hypothesis.

  |2| 'chi -> 'theta;
  |PropSimpleInf| !'phi -> ('chi -> 'theta);
  |PropDistribInf| (!'phi -> 'chi) -> (!'phi -> 'theta);

  Next, we change the \(!'phi\) in the consequent into a \(!'psi\), which we can
  do by using the contrapositive of the first hypothesis.

  |PropCommutation| !'phi -> ((!'phi -> 'chi) -> 'theta);
  |1| 'phi -> 'psi;
  |PropContraConvInf| !'psi -> !'phi;
  |Syllogism| !'psi -> ((!'phi -> 'chi) -> 'theta);
  |PropCommutation| (!'phi -> 'chi) -> (!'psi -> 'theta);

  This is the definition of what we were trying to show.

  |!def| ('phi | 'chi) -> ('psi | 'theta);
}

This property can be inherited to prove that they are both functions over
<ref ClassicalLogic.equiv /> as well.

\Theorem AndFunctionEquiv: ClassicalLogic {
  name = "Logical Conjunction is a Function over Material Equivalence"
  tagline = {
    If \('phi <-> 'psi\) and \('chi <-> 'theta\), then
    \(('phi & 'chi) <-> ('psi & 'theta)\).
  }

  flags = [
    function,
  ]

  var phi: Prop
  var psi: Prop
  var chi: Prop
  var theta: Prop

  premise = [
    'phi <-> 'psi;
    'chi <-> 'theta;
  ]
  assertion = ('phi & 'chi) <-> ('psi & 'theta);
}

\Proof AndFunctionEquiv: ClassicalLogic {
  This property is inherited from <ref ClassicalLogic.AndFunctionImplies />. We
  begin with the hypotheses.

  |1| 'phi <-> 'psi;
  |2| 'chi <-> 'theta;

  From the forward implications of the hypotheses, we can apply <ref
  ClassicalLogic.and /> as a function.

  |EquivForwardInf| 'phi -> 'psi;
  |EquivForwardInf| 'chi -> 'theta;
  |AndFunctionImplies| ('phi & 'chi) -> ('psi & 'theta);

  This gives us the forward implication for what we are trying to show. We get
  the backward implication similarly.

  |EquivBackwardInf| 'psi -> 'phi;
  |EquivBackwardInf| 'theta -> 'chi;
  |AndFunctionImplies| ('psi & 'theta) -> ('phi & 'chi);

  Altogether, we get

  |EquivIntroInf| ('phi & 'chi) <-> ('psi & 'theta);.
}

\Theorem OrFunctionEquiv: ClassicalLogic {
  name = "Logical Disjunction is a Function over Material Equivalence"
  tagline = {
    If \('phi <-> 'psi\) and \('chi <-> 'theta\), then
    \(('phi | 'chi) <-> ('psi | 'theta)\).
  }

  flags = [
    function,
  ]

  var phi: Prop
  var psi: Prop
  var chi: Prop
  var theta: Prop

  premise = [
    'phi <-> 'psi;
    'chi <-> 'theta;
  ]
  assertion = ('phi | 'chi) <-> ('psi | 'theta);
}

\Proof OrFunctionEquiv: ClassicalLogic {
  This property is inherited from <ref ClassicalLogic.OrFunctionImplies />. We
  begin with the hypotheses.

  |1| 'phi <-> 'psi;
  |2| 'chi <-> 'theta;

  From the forward implications of the hypotheses, we can apply <ref
  ClassicalLogic.and /> as a function.

  |EquivForwardInf| 'phi -> 'psi;
  |EquivForwardInf| 'chi -> 'theta;
  |OrFunctionImplies| ('phi | 'chi) -> ('psi | 'theta);

  This gives us the forward implication for what we are trying to show. We get
  the backward implication similarly.

  |EquivBackwardInf| 'psi -> 'phi;
  |EquivBackwardInf| 'theta -> 'chi;
  |OrFunctionImplies| ('psi | 'theta) -> ('phi | 'chi);

  Altogether, we get

  |EquivIntroInf| ('phi | 'chi) <-> ('psi | 'theta);
}

# Automatic Function Application

TODO: Write.

TODO: Rename what is currently called substitution to function application, and
implement substitution as a separate capability of ckproof.
