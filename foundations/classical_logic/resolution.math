On the last page, we saw how ckproof can automatically perform some parts of our
proofs for us. On this page, we will build up enough machinery to allow ckproof
to do all classical propositional calculus automatically. This will allow us to
finally move on to more interesting things.

# Conjunctive Normal Form

The technique used for the purpose of automatically proving statements in
<ref ClassicalLogic /> makes heavy use of Conjunctive Normal Form (CNF). This is
a kind of propositional statement which is formed by the following process:

<ol>
  <li>
    Take a bunch of variables. These variables, along with their negations, are
    called ``literals".
  </li>
  <li>
    Combine some of the literals, whichever ones you wish, into a bunch of
    groups using <ref ClassicalLogic.or />. These combinations are called
    ``terms".
  </li>
  <li>
    Combine all of the terms which you've created using
    <ref ClassicalLogic.and />. The resulting statement is now in CNF.
  </li>
</ol>

In <ref ClassicalLogic />, all statements are equivalent to some other statement
written in CNF. For example,

\[
  !('phi & ('psi -> 'chi))
\]

is equivalent to

\[
  (!'phi | 'psi) & (!'phi | !'chi)
\].

You can see that this statement is in CNF by breaking it up into its component
parts. The statement is formed from two terms: \(!'phi | 'psi\) and
\(!'phi | !'chi\). Both of these terms are formed using
<ref ClassicalLogic.or /> on the variables \('phi\), \('psi\), \('chi\) and
their negations. The two terms are then combined by a
<ref ClassicalLogic.and />.

As a counterexample, the statement

\[
  !('phi & 'psi)
\]

is <em>not</em> written in CNF because you are only allowed use negation on
variables when forming literals, so negating a <ref ClassicalLogic.and /> is
not allowed.

Conjunctive Normal Form has some nice properties which ckproof takes advantage
of. The first thing we need to do is prove some theorems which allow ckproof to
automatically convert a statement into its equivalent CNF.

## CNF for The Operators of Classical Logic

Each of the operators in <ref ClassicalLogic /> have a canonical CNF. Most
trivially, \(!'phi\), \('phi | 'psi\), and \('phi & 'psi\) are already in CNF.
For the other operators, we must be a little more clever. We'll start with a
lemma which is used in the proofs which follow.

\Lemma DNegEquiv: ClassicalLogic {
  name = "Double Negative Equivalence"
  tagline = {
    Statements are equivalent to their double negatives.
  }
  description = {
    This lemma is nothing more than a combination of
    <ref ClassicalLogic.DNegElim /> and <ref ClassicalLogic.DNegIntro />. This
    combined form can save a few steps in certain proofs.
  }

  var phi: Prop

  assertion = !!'phi <-> 'phi;
}

\Proof DNegEquiv: ClassicalLogic {
  The proof is trivial.

  |DNegElim| !!'phi -> 'phi;
  |DNegIntro| 'phi -> !!'phi;
  |EquivIntroInf| !!'phi <-> 'phi;
}

Using this lemma, we derive the CNF for <ref ClassicalLogic.implies /> and
<ref ClassicalLogic.equiv />.

\Theorem ImpliesCNF: ClassicalLogic {
  name = "Conjunctive Normal Form of Material Implication"
  tagline = {
    The canonical Conjunctive Normal Form of <ref ClassicalLogic.implies /> is
    \(!'phi | 'psi\).
  }

  var phi: Prop
  var psi: Prop

  assertion = ('phi -> 'psi) <-> (!'phi | 'psi);
}

\Proof ImpliesCNF: ClassicalLogic {
  This is derived from <ref ClassicalLogic.DNegEquiv />.

  |DNegEquiv| !!'phi <-> 'phi;
  |EquivSymmetric| 'phi <-> !!'phi;

  We then apply \(-> 'psi\) to both sides to get

  |!fun| ('phi -> 'psi) <-> (!!'phi -> 'psi);.

  By definition, this is what we were trying to show.

  |!def| ('phi -> 'psi) <-> (!'phi | 'psi);
}

\Theorem EquivCNF: ClassicalLogic {
  name = "Conjunctive Normal Form of Material Equivalence"
  tagline = {
    The canonical Conjunctive Normal Form of <ref ClassicalLogic.equiv /> is
    \((!'phi | 'psi) & ('psi | 'phi)\).
  }

  var phi: Prop
  var psi: Prop

  assertion = ('phi <-> 'psi) <-> (!'phi | 'psi) & (!'psi | 'phi);
}

\Proof EquivCNF: ClassicalLogic {
  This is derived from the Conjunctive Normal Form for both the forward and
  backward implications of \('phi <-> 'psi\).

  |ImpliesCNF| ('phi -> 'psi) <-> (!'phi | 'psi);
  |ImpliesCNF| ('psi -> 'phi) <-> (!'psi | 'phi);

  Because <ref ClassicalLogic.and /> is a function over
  <ref ClassicalLogic.equiv />, we can conclude

  |!fun|
    ('phi -> 'psi) & ('psi -> 'phi) <-> (!'phi | 'psi) & (!'psi | 'phi);.

  By definition, this is what we were trying to show.

  |!def| ('phi <-> 'psi) <-> (!'phi | 'psi) & (!'psi | 'phi);
}

## Constructing CNF for Larger Statements

From here, we need to develop a process to construct the Conjunctive Normal Form
for statements with more than just one logical connective. This process relies
on the following theorems.

### De Morgan's Laws and Other Distribution Laws

As we already saw, \(!('phi & 'psi)\) is not in CNF because that
<ref ClassicalLogic.negation /> is not in the right place. De Morgan's Laws are
used to distribute a <ref ClassicalLogic.negation /> into a more useful
position. The rule is that you can distribute in the
<ref ClassicalLogic.negation />, but in the process you must switch
<ref ClassicalLogic.and>Conjunctions</ref> into
<ref ClassicalLogic.or>Disjunctions</ref> and vice-versa.

\Theorem DeMorganAnd: ClassicalLogic {
  name = "De Morgan's Law for Logical Conjunction"
  tagline = {
    <ref ClassicalLogic.negation /> may be distributed into
    <ref ClassicalLogic.and />, but in the process you must switch it to
    <ref ClassicalLogic.or />.
  }

  var phi: Prop
  var psi: Prop

  assertion = !('phi & 'psi) <-> (!'phi | !'psi);
}

\Proof DeMorganAnd: ClassicalLogic {
  We begin by deriving an equivalent form of \(!('phi & 'psi)\).

  |DNegEquiv| !!('phi -> !'psi) <-> ('phi -> !'psi);
  |!def| !('phi & 'psi) <-> ('phi -> !'psi);

  But, from the CNF for \('phi -> !'psi\), we get that

  |ImpliesCNF| ('phi -> !'psi) <-> (!'phi | !'psi);.

  Altogether, we have

  |EquivTransitive| !('phi & 'psi) <-> (!'phi | !'psi);.
}

\Theorem DeMorganOr: ClassicalLogic {
  name = "De Morgan's Law for Logical Disjunction"
  tagline = {
    <ref ClassicalLogic.negation /> may be distributed into
    <ref ClassicalLogic.or />, but in the process you must switch it to
    <ref ClassicalLogic.and />.
  }

  var phi: Prop
  var psi: Prop

  assertion = !('phi | 'psi) <-> (!'phi & !'psi);
}

\Proof DeMorganOr: ClassicalLogic {
  Again, we begin by deriving an equivalent form of \(!('phi | 'psi)\).

  |EquivReflexive| !(!'phi -> 'psi) <-> !(!'phi -> 'psi);
  |!def| !('phi | 'psi) <-> !(!'phi -> 'psi);

  However, unlike the last proof, proving the equivalence between
  \(!(!'phi -> 'psi)\) and \(!'phi & !'psi\) is a little tricky. We begin with

  |DNegEquiv| !!'psi <-> 'psi;
  |EquivSymmetric, #4| 'psi <-> !!'psi;.

  After applying the functions <ref ClassicalLogic.implies /> and
  <ref ClassicalLogic.negation /> to <ref #4 />, we get

  |!fun| !(!'phi -> 'psi) <-> !(!'phi -> !!'psi);
  |!def| !(!'phi -> 'psi) <-> (!'phi & !'psi);.

  Altogether, we have

  |EquivTransitive| !('phi | 'psi) <-> (!'phi & !'psi);.
}

Similarly, the proposition \('phi | ('psi & 'chi)\) is not in CNF because the
operators are bacwards. That is, CNF requires a
<ref ClassicalLogic.and>Conjunction</ref> of
<ref ClassicalLogic.or>Disjunctions</ref>, but \('phi | ('psi & 'chi)\) is a
<ref ClassicalLogic.or>Disjunction</ref> of
<ref ClassicalLogic.and>Conjunctions</ref>. To convert this to CNF, we can
distribute in the \('phi\) to get \(('phi | 'psi) & ('phi | 'chi)\).

To prove that we can do this, we first need a lemma.

\Lemma ImpliesDistribAnd: ClassicalLogic {
  name = "Material Implication Distributes Over Logical Conjunction"
  tagline = {
    <ref ClassicalLogic.implies /> distributes over <ref ClassicalLogic.and />.
  }

  var phi: Prop
  var psi: Prop
  var chi: Prop

  assertion = ('phi -> ('psi & 'chi)) <-> ('phi -> 'psi) & ('phi -> 'chi);
}

\Proof ImpliesDistribAnd: ClassicalLogic {
  The forward implication is proven in two parts. For the first part, we take

  |AndRightElim| ('psi & 'chi) -> 'psi;

  and distribute in a \('phi\).

  |PropSimpleInf| 'phi -> (('psi & 'chi) -> 'psi);
  |PropDistribInf, #3| ('phi -> ('psi & 'chi)) -> ('phi -> 'psi);

  The second part is similar.

  |AndLeftElim| ('psi & 'chi) -> 'chi;
  |PropSimpleInf| 'phi -> (('psi & 'chi) -> 'chi);
  |PropDistribInf, #6| ('phi -> ('psi & 'chi)) -> ('phi -> 'chi);

  We can now join the consequents of <ref #3 /> and <ref #6 /> to get

  |JoinConsequentInf|
    ('phi -> ('psi & 'chi)) -> (('phi -> 'psi) & ('phi -> 'chi));.

  For the backward implication, we begin with the tautology

  |JoinConsequent|
    ('phi -> 'psi) -> (('phi -> 'chi) -> ('phi -> ('psi & 'chi)));.

  We can import the two antecedents to get the backward implication.

  |PropImport| (('phi -> 'psi) & ('phi -> 'chi)) -> ('phi -> ('psi & 'chi));

  Altogether, we have

  |EquivIntroInf|
    ('phi -> ('psi & 'chi)) <-> ('phi -> 'psi) & ('phi -> 'chi);.
}

From this, we can derive what we're looking for.

\Theorem OrDistribAnd: ClassicalLogic {
  name = "Logical Disjunction Distributes Over Logical Conjunction"
  tagline = {
    <ref ClassicalLogic.or /> distributes over <ref ClassicalLogic.and />.
  }

  var phi: Prop
  var psi: Prop
  var chi: Prop

  assertion = 'phi | ('psi & 'chi) <-> ('phi | 'psi) & ('phi | 'chi);
}

\Proof OrDistribAnd: ClassicalLogic {
  This is an interesting one because it's actually just a special case of the
  theorem we just proved.

  |ImpliesDistribAnd|
    (!'phi -> ('psi & 'chi)) <-> ((!'phi -> 'psi) & (!'phi -> 'chi));

  This is, by definition,

  |!def| 'phi | ('psi & 'chi) <-> (('phi | 'psi) & ('phi | 'chi));,

  which is what we were trying to prove.
}

### Putting it All Together

The following procedure informally outlines the process to convert any statement
into Conjunctive Normal Form.

<ol>
  <li>
    Convert all instances of <ref ClassicalLogic.implies /> and
    <ref ClassicalLogic.equiv /> into to their CNF. The entire sentence should
    now contain only <ref ClassicalLogic.negation />,
    <ref ClassicalLogic.and />, and <ref ClassicalLogic.or />.
  </li>
  <li>
    Distribute in all <ref ClassicalLogic.negation>Negations</ref> using De
    Morgan's laws until they are inside all the
    <ref ClassicalLogic.and>Conjunctions</ref> and
    <ref ClassicalLogic.or>Disjunctions</ref>.
  </li>
  <li>
    Distribute the <ref ClassicalLogic.or>Disjunctions</ref> into the
    <ref ClassicalLogic.and>Conjunctions</ref>.
  </li>
  <li>
    Remove all double-negatives. The statement is now in CNF.
  </li>
  <li>
    The statement may optionally be simplified further.
  </li>
</ol>

Towards the beginning of this page, we mentioned that
\(!('phi & ('psi -> 'chi))\) is equivalent to
\((!'phi | 'psi) & (!'phi | !'chi)\). As an example, let's prove this claim.

\Example CNFExample: ClassicalLogic {
  name = "Finding the Conjunctive Normal Form of a Statement"
  tagline = {
    The Conjunctive Normal form of the proposition \(!('phi & ('psi -> 'chi))\)
    is \((!'phi | 'psi) & (!'phi | !'chi)\).
  }

  var phi: Prop
  var psi: Prop
  var chi: Prop

  assertion = !('phi & ('psi -> 'chi))
    <-> (!'phi | 'psi) & (!'phi | !'chi);
}

\Proof CNFExample: ClassicalLogic {
  The first step is to replace \('psi -> 'chi\) with its CNF. We have already
  proven that

  |ImpliesCNF| ('psi -> 'chi) <-> (!'psi | 'chi);,

  and from this we may derive

  |!fun, #2| !('phi & ('psi -> 'chi)) <-> !('phi & (!'psi | 'chi));.

  The next step is to distribute in that negation symbol. We know that

  |DeMorganAnd| !('phi & (!'psi | 'chi)) <-> !'phi | !(!'psi | 'chi);,

  and so, by transitivity with <ref #2 />, we get

  |EquivTransitive, #4| !('phi & ('psi ->'chi)) <-> !'phi | !(!'psi | 'chi);.

  For that inner portion, i.e. \(!(!'psi | 'chi)\), we have

  |DeMorganOr| !(!'psi | 'chi) <-> !!'psi & !'chi;,

  which we can substitute into <ref #4 /> to get

  |!sub, #6| !('phi & ('psi -> 'chi)) <-> !'phi | (!!'psi & !'chi);.

  Next, we use the distributivity of <ref ClassicalLogic.or />.

  |OrDistribAnd|
    !'phi | (!!'psi & !'chi) <-> (!'phi | !!'psi) & (!'phi | !'chi);

  By transitivity with <ref #6 />, we get,
  
  |EquivTransitive, #8|
    !('phi & ('psi -> 'chi)) <-> (!'phi | !!'psi) & (!'phi | !'chi);.

  Finally, we need to eliminate the double negative from \(!!'psi\). To do this,
  we simply take

  |DNegEquiv| !!'psi <-> 'psi;

  and substitute it into <ref #8 /> to get

  |!sub| !('phi & ('psi -> 'chi)) <-> (!'phi | 'psi) & (!'phi | !'chi);,

  which is what we were trying to prove.
}

# Propositional Resolution

\Theorem AndDistribOr: ClassicalLogic {
  name = "Logical Conjunction Distributes over Logical Disjunction"
  tagline = {
    TODO: Tagline.
  }

  var phi: Prop
  var psi: Prop
  var chi: Prop

  assertion = 'phi & ('psi | 'chi) <-> ('phi & 'psi) | ('phi & 'chi);
}

\Proof AndDistribOr: ClassicalLogic {
  The forward implication is derived from these two theorems.

  |OrRightIntro, #right1| ('phi & 'psi) -> ('phi & 'psi) | ('phi & 'chi);
  |OrLeftIntro, #left1| ('phi & 'chi) -> ('phi & 'psi) | ('phi & 'chi);

  We can rearrange <ref #right1 /> to get

  |PropExport| 'phi -> ('psi -> ('phi & 'psi) | ('phi & 'chi));
  |PropCommutation, #right2| 'psi -> ('phi -> ('phi & 'psi) | ('phi & 'chi));.

  Similarly, for <ref #left1 />, we get

  |PropExport| 'phi -> ('chi -> ('phi & 'psi) | ('phi & 'chi));
  |PropCommutation, #left2| 'chi -> ('phi -> ('phi & 'psi) | ('phi & 'chi));.

  We can combine <ref #right2 /> and <ref #left2 /> to get

  |OrElim| ('psi | 'chi) -> ('phi -> ('phi & 'psi) | ('phi & 'chi));.

  From here, it's just a simple rearrangement to get the forward implication.

  |PropCommutation| 'phi -> (('psi | 'chi) -> ('phi & 'psi) | ('phi & 'chi));
  |PropImport| 'phi & ('psi | 'chi) -> ('phi & 'psi) | ('phi & 'chi);

  The backward implication is a little easier. From

  |OrRightIntro| 'psi -> 'psi | 'chi;,

  we can apply <ref ClassicalLogic.and /> to both sides of the implication to
  get

  |!fun, #right3| ('phi & 'psi) -> 'phi & ('psi | 'chi);.

  Similarly,

  |OrLeftIntro| 'chi -> 'psi | 'chi;
  |!fun, #left3| ('phi & 'chi) -> 'phi & ('psi | 'chi);.

  Finally, <ref #right3 /> and <ref #left3 /> can be combined to get the
  backward implication.

  |OrElim| ('phi & 'psi) | ('phi & 'chi) -> 'phi & ('psi | 'chi);

  Altogether, we get

  |EquivIntroInf| 'phi & ('psi | 'chi) <-> ('phi & 'psi) | ('phi & 'chi);.
}

\Theorem PropResolution: ClassicalLogic {
  name = "Propositional Resolution"

  tagline = {
    TODO: Tagline.
  }

  var phi: Prop
  var psi: Prop
  var chi: Prop

  assertion = ('phi | 'psi) & (!'phi | 'chi) -> 'psi | 'chi;
}

\Proof PropResolution: ClassicalLogic {
  |PropExplosion| !'phi -> ('phi -> 'psi | 'chi);
  |PropImport| (!'phi & 'phi) -> 'psi | 'chi;

  |AndLeftElim| (!'phi & 'psi) -> 'psi;
  |OrRightIntro| 'psi -> 'psi | 'chi;
  |Syllogism| (!'phi & 'psi) -> 'psi | 'chi;

  |OrElim| (!'phi & 'phi) | (!'phi & 'psi) -> 'psi | 'chi;

  |AndSymmetry| ('phi | 'psi) & !'phi -> !'phi & ('phi | 'psi);
  |AndDistribOr| !'phi & ('phi | 'psi) <-> (!'phi & 'phi) | (!'phi & 'psi);
  |EquivForwardInf| !'phi & ('phi | 'psi) -> (!'phi & 'phi) | (!'phi & 'psi);
  |Syllogism| ('phi | 'psi) & !'phi -> (!'phi & 'phi) | (!'phi & 'psi);

  |Syllogism| ('phi | 'psi) & !'phi -> 'psi | 'chi;

  |AndLeftElim| ('phi | 'psi) & 'chi -> 'chi;
  |OrLeftIntro| 'chi -> 'psi | 'chi;
  |Syllogism| ('phi | 'psi) & 'chi -> 'psi | 'chi;

  |OrElim| (('phi | 'psi) & !'phi) | (('phi | 'psi) & 'chi) -> 'psi | 'chi;
  |AndDistribOr|
    ('phi | 'psi) & (!'phi | 'chi)
      <-> (('phi | 'psi) & !'phi) | (('phi | 'psi) & 'chi);
  |EquivForwardInf|
    ('phi | 'psi) & (!'phi | 'chi)
      -> (('phi | 'psi) & !'phi) | (('phi | 'psi) & 'chi);
  |Syllogism| ('phi | 'psi) & (!'phi | 'chi) -> 'psi | 'chi;
}

# Automatic Proofs in Propositional Calculus Using Resolution
